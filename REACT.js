// Инициализация приложения NPM
// NPM init
// Создается файл package.json
// Он описывает наши проекты. Также, файл позволяет легко делиться пакетами.
// Достаточно взять чужой package.json, залить его к себе и выполнить команду npm install. Необходимые пакеты сами скачаются




// React нужен для построения интерфейсов
// react необходим для оптимизации больших проектов. Подключать множество js файлов с приложениями для сайта не эффективною. React позволяет строить сайт кусочками. При правильном использовании кусочки получаются изолированными. Отдельные кусочки называются компонентами. Они имеют законченную функцию. Их можно повторно использовать при необходимости

//npm install -g create-react-app
//@ данная команда позволяет установить пакет create-react-app, с помощью которого можно создавать шаблоны для react приложений. флаг -g устанавливает пакет глобально

//npx create-react-app
//@ Команда которая устанавливает пакет

// Для установки пакета приложения используется команда 
// npm -install -g create
// Флаг -g означает, что http-server должен быть установлен глобально и быть доступными для всех приложений.

// Удаление локально установленного пакета
// npm uninstall http-server

// Удаление глобально установленного пакета
// npm uninstall http-server -g

// ↑↑ Это сам фреймворк React

//Для установки приложения в реакте необходимо выполнить

// Запуск реакт приложения
//npm start

//запускать приложение необходимо из его папки
//C:\js\react\myapp>
//_____________________

//* Повесить событие на кнопку
//* Событие в react прописывается inline, в отличии от обычной верстки html, css, js 
<button onClick={this.showText}>Push1</button>
//* И еще необходимо создать сам метод, который будет вызывать результат
showText() {
   console.log('showTxt button')
}

// Важно помнить, что события в jsx присваиваются с помощью переменной this (мы ссылаемся на метод)
//_____________________



//@ inline style
// Применение инлайн стилей
//  <footer className="section footer-classic context-dark" style = {{background: "#2d3d46", color: "#fff"}}>
//_____________________

//@ input
// данный элемент пишется в стиле <input /> 

//@ <li> Списки и ключи
// Когда мы выводим данные в списки, реакт просит, чтобы каждому списку мы присваивали ключ. Тогда движок сможет идентифицировать список.
// data.map(el, index) => { return <li key={index.toString()></li>}}
// Параметр index отвечает за индекс элемента в массиве. Методом toString() мы конвертируем значение индекса в строку и таким образом даем движку возможность учитывать списки по индексу.


//@ props & state

// переменные могут объявляться с помощью let
// А использоваться посредством {}
// let a = 42
// <h1>{a}</h1>
// Однако такой метод приведет к тому, что в последующем придется искать переменную по всем компонентам, чтобы ее изменить. 
// Задавать переменные необходимо в единой точке входа, чтобы родительские компоненты могли делиться информацией с дочерними компонентами
// Для этого существует технология props

// 1. Создаем компонент, который будем передавать в пропс
// 2. В самом компоненте с помощью this.props.* (название компонента) передаем его в другой файл, где хотим его вызвать.
// 3. логично было бы передать его в файл, где собраны все компоненты согласно верстки. А оттуда уже передать это пропс с помощью this.props.* в точку входа приложения. И уже там задать значение пропса. Таким образом все будет разложено по своим местам. Верстка компонентов, к примеру, в файле App.js, значение пропсов в главном файле index.js. 

//! главное отличие между props и state - первый мы не меняем  (хотя можем), а второй меняем в процессе

//@ state - это данные в виде объекта внутри компонента, изменение которых приводит к перерисовке компонента.  
//объект this.state = {ключ: "значение"}

//? Цепочка работы со state в рамках замены данных. Рассматривается при нажатии на кнопку.

// 1) создаем state по аналогии с props 
// 2) создаем кнопку и вешаем на нее событие
// 3) в текущем компоненте создаем функцию (метод), при вызове которой будет происходить замена
// 4) В этом методе прописываем конструкцию this.setState({key: 'значение'})
// 5) В данном примере изначально у нас state выглядит так:

this.state = {
   text: "Hello, it's a state component"
   
}

//* касательно присваивания события и вызова метода еще можно почитать непосредственно в компоненте StatePractice. Там указано, как ведет себя this на методе и как правильно делать присваивание.