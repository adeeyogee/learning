// Ключевое слово this - это специальная переменная,которая создается для каждого контекста выполнения (каждой функции). Значение не является статическим. 

// this никогда не указывает на саму функцию, в которой мы его используем
// this никогда не указывает на variable environment, в которой оно используется

// 1) Вне функции, this ссылается на объект по умолчанию Window

// 2) Внутри функции, если функция просто на выполнение - также объект Window

// function test() {
//    return console.log(this)
// }
// test()

// 3) Если функция запускается по какому-либо событию, то this - это ЭЛЕМЕНТ, НА КОТОРОМ ПРОИЗОШЛО СОБЫТИЕ

// 4) В данном случае слово this внутри МЕТОДА объекта указывает на сам объект. Иными словами, this указывает на владельца метода. 
//! Тут важно различать: this указывает на объект options не потому, что он записан внутри этого объекта, а потому что метод ВЫЗВАН этим объектом
// Займ метода - взять метод из объекта и поместить его в другой объект. К тому же, this будет ссылаться уже на //!новый объект, на объект, который этот метод будет вызывать

// const options = {
//    currentResolution: 1920,
//    width: 1024,
//    height: 768,
//    makeTest: function () {
//        console.log(this.currentResolution - this.width);
//    }
// };

// options.makeTest()



//_____________________________

// просто дополню чуть, вдруг кому на самом деле будет интересно как оно из коробки работает.)))
// сам js, он имеет лексическую область видимости, а this был создан, чтоб воссоздать то, что будет иметь динамическую область видимости! this, это не игрушка! перед тем как это использовать, сто раз подумайте - "а надо ли нам тут динамическая область видимости?". вообще, лучше изучите область видимости js, перед тем как писать код на проф уровне! просто var к примеру, это не устаревшая система переменных! это опять же инструмент, который работает в функциональной области видимости. а let, это блочная область видимости! а const надо использовать, когда у вас переменная не изменяема, в примере Александра, обращение к элементу дома, логичнее писать через const! ну а let на деле выглядит вот так { let a = 2; print(a);} это блочная область видимости, вот так ее правильно используют. за пределами фигурных скобок, переменная a = 2 не видна! вот для этого и создали let, чтоб не плодить глобальные переменные. для остального используется var. к примеру в цикле for если вы напишите let i = 0; а не var i = 0; , при каждой итерации цикла, будет создаваться переменная  let i = значение, это все будет создаваться в памяти, а не перезаписываться i = 0! а в случаи с var, перезаписывается значение var. вы никогда не сможете писать замыкания, если не поймете как работает область видимости в js! this используйте только тогда, когда вам реально необходимо поменять глобальную область с лексической на динамическую! иначе, попадете на кучу багов и вздернитесь исправлять их.))) надеюсь кому-то будет полезным!)) сложного в этом, вообще нет ничего!))) есть еще такое как правосторонний поиск, и левосторонний. правый всегда будет выдавать вам undefined, когда вы понимаете это, дебажить код, одна радость.))) 

//____________________________