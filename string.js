//СТРОКОВЫЙ ТИА ДАННЫХ

//Методы - вспомогательные функции. Всегда пишутся с круглыми скобками
//Свойства (property) - вспомогательные значения. Вызываются через точку


let name = 'Dmitry Frolikov'
let age = 32
let out = 'Привет, меня зовут ' + name + ' и мой возраст ' + age;
console.log(out)

//так соединять переменные не корректно (имеется в виду, для оптимизации и читабельности кода лучше так не складывать) (конкатенация) (конкатенация - сложение строк с чем-то)
// код становится проще читать, если будем использовать обратные ковычки ( шаблонные строки (шаблонные литералы))

let out2 = `Привет, меня зовут ${name} и мой возраст ${age}`
console.log(out2)

//результат одинаковый, однако 2й вариант кода воспринимает гораздо лучше
// в конструкции ${} мы не можем использовать if выражения
//однако можем использовать тернарные выражения и функции
// Пример

const n5 = 15
const text2 = `сегодня 128 день войны, а я освоил уже ${n5 + Math.floor(10*Math.random()+1)} тем`
console.log(text2)
// добавили генератор случайных чисел в шаблонное выражение

//Экранирование

//let text = 'случайная цитата: 'Учение свет...'' - Великий философ'
//console.log(text)
// в результате будет ошибка, т.к. будет конфликт кавычек

let textEkr = 'случайная цитата: \'Учение свет...\' - великий философ'
console.log(textEkr)




let out3 = `Привет, меня зовут ${name} и мой возраст ${age < 30 ? 'A' : 'B'} лет`
console.log(out3)
// Тернарное выражение проверяет условие (age < 30 в данном случае)
//и возращает либо true, либо false (в нашем случае А или В)


const out4 = `
<div>This is div </div>
<p> This is p </p>
`
console.log(out4)
// Требуется детальное изучение данной возможности

/*________________________
const header = 'Шаблонные строки'; //заголовок списка
const tags = ['Шаблонные строки', 'Шаблонные литералы', 'ES6', 'DF32']; //на странице это будет список, а в коде - это массив
let html = `<h2>${header}</h2><ul>`; // переменная html - это то, с помощью чего мы будем передеавать результат цикла на страницу
for (const x of tags) { //цикл перебора массива
    html +=`<li>${x}</li>`; // та строка кода, которая позволяет нам создать список на странице (<li> - list, список)
}
out +=`</ul>`;
document.getElementById('out').innerHTML = html
// Данный код создает html структуру и выводит ее на страницу.
____________________________*/

/*_______________________

//              МЕТОДЫ


 console.log(name.length) //вывод количества символов в строке и не только. length - это свойство
 console.log(name.toUpperCase()) //возвращает новое значение,а не изменяет исходник
 console.log(name.toLowerCase()) //возвращает новое значение,а не изменяет исходник
 console.log(name.charAt(1)) // можем спрашивать, какой символ находится на заданном месте. В данном случает ответ 'm' - 1й символ от 0 до 6
 console.log(name.indexOf('mit')) // Такой конструкцией мы спрашиваем, есть ли в строке определенные символы. в нашем случае ответ будет 1 (с первого символа начинается конструкция mit) Может быть полезен для поиска чего-то в строке. Отрицательный результат возвращает -1
 console.log(name.startsWith('dmi'))
 console.log(name.includes('n') // true Проверяем, содержит ли строка определенный символ
 console.log(name.endsWith('y')) // Спрашиваем, начинается (заканчивается) ли строка данными символами
 console.log(name.repeat(3)) //повтор строки
 console.log(name.replace ('Frolikov', 'Vladimirovich')) // Интерпретатор проверяет строку на наличие 1го аргумента и заменяет его 2м
 console.log(name.split()) //разбивает строку на массив
 console.log(name.reverse) //разворачивает строку
 console.log(name.join()) //соединяет разбитую строку на массив обратно в строку
 //let stri = '      password';
 //console.log(stri.trim()) //метод позволяет обрезать лишние пробелы (можем использовать .trimLeft или .trimRight)

 //К каждому элементу строки мы можем обратиться с помощью [], а внутри указать индекс, какой нас интересует
 alert("Привет"[3]) и - от 0 до 3, "и" - 3й индекс в слове Привет
________________________*/
 //  МЕТОДЫ, КОТОРЫЕ НАПРЯМУЮ ИЗМЕНЯЮТ СТРОКИ

 let a = 'hello world'
 //console.log(a.slice(2, 9)) // Принимает аргументы start, end (2,9)Позволяет отрезать символы 2 - отрезать 2 символа с НАЧАЛА, 9 - отрезать ДО 9го. Также, можно использовать и отрицательные значения
 //console.log(a.substring(2, 9)) // Почти то же самое, что и slice, но не поддерживает отрицательные значения.
 console.log(a.substr(1, 4)) // первый аргумент - с какого по счету символа начинаем, 2й - сколько символов вырезать (сколько будет в остатке)


/* В JavaScript можно проверить, является ли символ буквой или нет. Сделать это можно с помощью приведения строки к нижнему регистру и проверкой, соответствует ли строка в нижнем регистре строке в верхнем регистре. Если не соответствует, то этот символ - буква и 'console.log()' вернет true. Если это другой символ, например, число, то проверка вернет false, так как числа в верхнем и нижнем регистрах будут одинаковы */

function isLetter(ch) {
    return ch.toLowerCase() !== ch.toUpperCase();
  }



  // Превращение числа в строку

  //1 n.toString() с помощью метода
  //2 n + '' сочетание числа и строки дает в результате строку
  // let str = `${n}` через интерполяцию