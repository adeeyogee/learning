// null - ничто, значение не известно. Как правило, присваивается вручную
// undefined - не назначено. let a // а будет undefined, пока не приобретет значение.




//ВОЗВРАТ ЗНАЧЕНИЙ
//__________________
// Ложными (false) значения будут следующие:
// false
//  0
//  '' (строка с пробелом будет true)
//  null
//  undefined


// ВОЗВРАТ ТИПА ДАННЫХ
//____________bn()
// - undefined - undefined
// - 
// - infinity - number
// - null // object (баг, который является общепризнанным. null не является объектом. null это null )
// - 10n // bigint
// - Math // object
// - alert // function
// - console // object
// - Symbol // function
//
//
//
//
// typeof 10 === 'number' // true (typeof 10 вернет 'number', а потом мы сравниваем 'number' и 'number')


//В математике на 0 делить нельзя, однако в js существует результат деления на 0
// console.log(9 / 0) // infinity
// console.log(Number.isNaN(9 / 0)) // false  Если сделать проверку, является ли результат НЕ числом (NaN), то получим ложь, т.к. бесконечность - это не NaN



//ПРЕФИКСНАЯ И ПОСТФИКСНАЯ ФОРМЫ ЗАПИСИ
/*let x = 4
alert(x++) //постфиксная - сначала вернет 4, а потом увеличит на 1 наш х
alert(++x) //префиксная - сразу увеличит на 1 значение x
*/
//точно также работает и с операторами декремента


//Оператор instanceof
// Проверяет, является ли переменная экземпляром класса
//данный оператор имеет 2 операнда. (|что проверяем| |str| |Класс|)
 const str = 'hello'
console.log(str instanceof String) //так мы проверили, не содержит ли str объект в качестве значения. Строка - примитивный тип данных. Объект - ссылочный тип данных
//ОПЕРАТОРЫ СРАВНЕНИЯ

//console.log(5%2) // остаток от деления. Мы 5 делим на 2 столько раз, сколько возможно и в остатке получаем 1
// = - присваивание
// += - дополнительное присваивание. (может использоваться и с минусом)
//работает по типу а = а + 1. это все равно что а += 1. Это работает и со строками    
// == - сравнение (2*4 == 8. Если просто =, тогда это будет присваивание)
// === строгое сравнение (2*4 === "8". мы числовое умножение сравниванием со строкой. Результат будет false. Однако
// Если использовать == , то результат будет true, несмотря на то, что 8 - это строка. При == будет рассматриваться само значение строки, а не строка это или число)


// ОПЕРАТОРЫ И ИЛИ НЕ

//операторы && || являются операторами КОРОТКОГО ЗАМЫКАНИЯ

//&& - оператор И (ВСЕГДА ОСТАНАВЛИВАЕТСЯ НА ЛЖИ. Т.е. если при прочтении программой кода, программа получит false,то она вернет это значение, которое и вызвало false. как будто был прописан return. Код дальше выполняться не будет) Отличным примером будет требования для выезда за границу: Нужен паспорт И страховка. Если паспорта нет, то наличие страховки даже не рассматривается.

// || - ИЛИ. ВСЕГДА ОСТАНАВЛИВАЕТСЯ НА ПРАВДЕ. 

// ! - оператор не. ВАЖНО для понимания тот факт, что данный оператор СНАЧАЛА приводит значение к логическому типу, а потом возвращает противоположное ему.

// ПРИМЕРЫ с одинарным и двойным отрицанием. Двойное отрицание используется для того, чтобы привести значение к булиевому типу. Или с помощью метода Boolean()
//_______________________________
// !10 // false (!!10 // true)
// !0 // true (!!0 // true)
// !'abc' // false (!!'abc' // true)
// !'' // true (!!'' // false)
// !true // false (!!true // true)
// !undefined // true (!!undefined // false)
// !object //false (!!object // true)


// ОПЕРАТОР РАЗДЕЛЕНИЯ ОБЪЕКТА НА СВОЙСТВА ...

const button = {
    width: 200,
    text: 'new'
}

const redButton = {
    ...button,
    color: 'red'
}
console.table(redButton) // оператор table выводит результаты в виде таблицы.
// Оператор ... работает следующим образом. Он берет объект и разделяет последовательно его на свойства. в примере выше мы разделили объект newButton на свойства в процессе создания нового объекта, и добавили еще одно свойство.

const unitedOb = {
    ...button,
    ...redButton,
    length: 600
}

// В примере выше объединил 2 объекта с помощью оператора ... в третий и добавил еще одно свойство
console.table(unitedOb)

/*-----

let a = true,
    b = true;
    console.log(a && b) // true

-----*/
//_________________________________________________


//ТЕРНАРНЫЙ ОПЕРАТОР ? (Тернарный, потому что в его работе участвуют 3 операнда)


// Сначала проверяет первое выражение и если оно правдиво, то возвращается. Если ложно, то проверяется второе выражение и возвращается.

/*Рекомендуемая запись :
________________
(условие) 
? выражение 1 
: выражение 2
________________
*/
//В отличии от оператора if, тернарный оператор принимает только выражения, в то время как if принимает еще и инструкции
//Вызов функции - это выражение, поэтому мы можем вызывать функции с помощью тернарного оператора
const value1 = 10
const value2 = 15
const value3 = -1
/*
value1 && value2
? myFunction (value1, value2)
: myFunction2
*/
//У нас есть 2 переменные. Мы проверяем на правдивость значение 1 и значение 2, если после проверки они оба правдивы (а они да), то идет вызов функции с параметрами значение 1 и значение 2. Если проверка ложная (например, значение 1 равно 0), то итератор проверяет следующее условие, в котором мы просто вызываем функцию.

//Результат выражение с  ТО можно присваивать переменной
console.log(value1 >= 0 ? value1 : -value1) //10
//Происходит следующее: В метод .log() мы передаем условие, в котором проверяем нашу переменную. В результате проверки выполняется выражение value и мы получаем 10
console.log(value3 >=0 ? value3 : -value3) //1 
//Происходит следующее: Итератор проверяет переменную value3 согласно условия и выполняет одно из двух выражений. В данном случае выполняется 2ое выражение. Тут важно сказать, что само выражение -value3 означает, что наша переменная примет на себя знак -. Т.к. у нас значение переменной -1 и выражение -value3 тоже присваивает -, то в итоге получаем 1.
//Таким образом, можем присваивать значения переменным через ТО
//_________________________________________________
//УСЛОВНЫЙ ОПЕРАТОР if
// в блоке if выполняется все то, что не ложно. иначе, код срабатывает дальше
/*let a = 6;

if (a > 9) {
    console.log('yes') // 
} else { console.log('no') //else писать не обязательно. Однако, если оно присутствует, то сработает что-то одно из двух (либо if, либо else)
}
*/

//ОПЕРАТОР else if

/*-----
const browser = 'Edge'

if (browser == 'Edge' && browser == 'Opera') {
    alert('da');
} else if (browser == 'Edge' || 'Chrome') {
    alert('toje da')
} else {
    alert('net')
}

-----/*

//КОНСТРУКЦИЯ SWITCH CASE - используется для прямого сравнения конкретного числа. К промежуткам применим if
// данная конструкция необходима для последующего сравнения данных с условиями.

let month = 2
switch (month) {
    case 12:
        console.log('Декабрь')
        break
    case 1:
        console.log('Январь')
        break
    case 2:
        console.log('Февраль')
        break
    default:
        console.log('Это не зимний месяц')
}
// Команда break нужна для остановки сравнения.
//команда default нужна в случае,если значение переменной выходит за рамки наших кейсов сравнения (в данном случае 888 мы в кейсах не проверяем) 
//default = значение, кроме всех остальных кейсов
*/

//ЗАДАЧА 1
// Пользователю необходимо ввести возраст: если меньше 16, то запрещено. Если больше, то разрешено

/*-----
const button = document.querySelector('button'); //получаем в переменную button кнопку со страницы (Enter age)
const input = document.querySelector ('.age'); // по аналогии, в переменную input получаем значение из инпута со страницы
//эти две конструкции нам нужны для того, чтобы работать с нами на поле js кода. Так-то, они прописаны на страницы, как html элементы
//этими командами мы получаем элементы со страницы и можем дальше оперировать элементами в js файле

button.onclick = () => {
    let num = +input.value //мы хотим работать со значением, которое получаем от пользователя в элементе input
    //любое значение, которая попадает в input - это строковое значение. чтобы перевести его в число, ставим +
    if (num >=16 && num <= 70) { // чтобы задать диапазон срабатывания, нельзя просто написать num >= 16 <= 70. Необходимо использовать оператор && (или)
        console.log('Welcome')
    }
        else if (num > 71 ) {
            console.log('ого')
        }
     else {
        console.log('no')
    }
}

-----*/




